---
title:  "TIS 200606"
excerpt:  "Class 02"

categories:
  - TIS
tags:
  - SQL
  
toc: true
toc_sticky: true
---

## SQL Class Notes 2020.06.06

by 러닝스푼즈 김경수 강사님


### 관계형 데이터베이스


#### PK, FK 재약조건

PK : 중복 X, NOT NULL

FK : "부모 없는 자식은 없다"

PK 는 무조건 존재해야 하고, FK 는 없을수도 (성능 문제)


### 기본 쿼리


#### SQL 문의 종류

구조적, 집합적, 선언적

DML : 데이터 자체 다룸 (C-INSERT, R-SELECT, U-UPDATE, D-DELETE)

TCL : COMMIT, ROLLBACK

DDL : 데이터가 담는 그릇을 건드림 (CREATE, ALTER, DROP, ...)

DCL : GRANT, REVOKE


#### SELECT

- 업무적인 요구사항 먼저 정의

- 데이터 (가공해서) 조회, 원본 데이터를 바꾸지 않음

- 순서 / 논리 체계 :<br>
    찾는 데이터 어느 테이블에 있는지 먼저 보기(FROM)<br>
    -> 조건 확인(WHERE)<br> 
    -> 집계 유무(GROUP BY)<br> 
    -> 또 다른 조건(HAVING)<br> 
    -> 보고자 하는 컬럼 기술(SELECT)<br>
    -> 정렬(ORDER BY) 

- SELECT, FROM 절은 필수고 나머지는 선택 

```sql 
SELECT 컬럼명 FROM 테이블;

-- * : 애스터리스크 (= ALL)
SELECT * FROM TABLE1;
```

`*` : 썼을때 느려지면 성능문제 있을수도, 데이터 저장 문제

```sql 
--테이블 구조 확인
DESC 테이블명;
```

```sql
SELECT ALL job FROM emp;
--기본이라 보통 생략함

SELECT DISTINCT job FROM emp;
--중복 제거, 값의 종류 확인 용도

SELECT deptno AS dno, dname AS "부서 명", loc "LOC ation!@"
    FROM dept;
--alias 사용하기 : 가독성 향상
--"" : 공백이나 특수문자 포함시키고 싶을때 사용
--더 일반적으로는 공백 대신 '_' 사용 e.g. 부서_명

SELECT a.deptno, a.dname
    FROM dept a;
--테이블 별칭 (dept.deptno -> a.deptno)
--한 쿼리에서 테이블 두개 이상 사용할때 
```


#### Literal

변하지 않는 값

```SQL
SELECT a.deptno,
    'data' AS char_literal, 99 AS num_literal, DATE '2018-06-05' AS date_literal
    FROM dept a;
```

`'3709'` = 문자(왼쪽 정렬)

`3709` = 숫자(오른쪽 정렬)


#### 연산자

* 산술 : `*, /, +, -`

    - 숫자 `*, /, +, -` 숫자

    - 날짜(1 = 하루) `+, -` 숫자

    - 날짜 `-` 날짜 = 일수 차이 

* 연결 : `||`

```sql 
(a.sal + 1000) / 2
--여기서 `1000, 2` 가 (숫자)리터럴

a.hiredate - 1/24/60/60
--1초 빼기

a.hiredate - DATE '1981-02-01'
--뒤에 날짜가 더 과거이므로 음수값 나옴

a.empno || '번 사원의 이름은' || a.ename || ' 이고, ' ...
--연결 연산자
```


#### NULL

아직 정의되지 않은 값

선택 속성, not 필수 속성

!= 0, ' '(공백)

= '' from Oracle

*NULL 을 포함한 산술 연산의 결과는 항상 NULL*


#### DUAL 테이블

일종의 DUMMY 테이블 

리터럴 조회, 행 복제 시에 활용

```sql 
SELECT 'data' AS char_literal,
    99 AS num Literal,
    DATE '2018-06-05' AS date_literal
    FROM dual;
```


#### 주석

`--` 나 `/* */` 사용해 주석 기술 

`ctrl + -` : 한줄 한번에 주석 처리


#### WHERE

조건 기술

조건의 결과가 TRUE 인 행만 결과에 포함 

```sql 
SELECT 컬럼, 컬럼, ...
    FROM 테이블
    WHERE 조건;
```

* 비교 조건 
    - `=, >, >=, <, <=, <>` 
    - e.g. `WHERE a.sal > 1000`

* 논리 조건 : AND, OR, NOT(반대) 
    - NOT >>> AND >>> OR
    - 괄호로 우선순위 지정
    - 의미를 명확하게 하기 위해서 왠만하면 NOT 사용 X

* IN 조건 : IN (값)
    - NOT IN 에 NULL 이 들어가면 결과가 아무것도 출력 X

* BETWEEN 조건 : 해당 값도 포함(이상, 이하)
    - NOT BETWEEN (미만, 초과)

* LIKE 조건 : 패턴에 일치하는지
    - 양쪽 모두 문자여야함 
    - '%' : 0개 이상의 모든 문자와 일치 
        - %ER : ER로 끝나는 (ER 포함)
        - ER% : ER로 시작하는 (ER 포함)
        - %T% : T로 시작, 끝, 중간 모두 포함 

    - '_' : 1개의 모든 문자와 일치
        - ___E_ : 앞에 3자 + E + 뒤에 1자
        - ___E% : 4번째 E 인 문자 뽑기
        
    - '/ or \' : 지정하고 작성하면 문자로 인식
        - 30/%% : 30%로 시작하는
        - 데이터에 절대 나올수 없는 값으로 지정

* IS NULL 조건 : IS, IS NOT NULL
    - 다른 비교 연산자 사용 불가

```sql
WHERE sal IS NULL AND sal > 2500
    OR sal IS NOT NULL AND sal + comm > 2500
```


#### ORDER BY 

*기술 순서가 중요!*

```sql 
ORDER BY job, deptno DESC, hiredate ASC;

--job 으로 먼저 정렬 
--같은 값 deptno 로 정렬
--그래도 같은 값은 hiredate 로 정렬
```

기술하지 않을 경우, 무작위로 출력됨

ASC(default, 생략 가능) / DESC

컬럼 별칭, 위치(실수 자주 발생하므로 권장 X) 등을 혼합해서 기술할 수 있음

데이터 유형에 따라 정렬 순서 달라질 수 있음

```sql 
TO_CHAR(sal) DESC 
--첫글자에서 내림차순으로 
--9부터 
```

NULLS FIRST / NULLS LAST

```sql 
ORDER BY comm NULLS FIRST;
--널 앞으로

ORDER BY comm NULLS LAST;
--널 맨뒤로
```


#### ROWNUM

의사 컬럼 : 컬럼이 아닌데 컬럼 처럼 쓸 수 있는 것

ROWNUM : 행의 순서를 나타내는 의사 컬럼

`WHERE ROWNUM <= 5`

`<=, <` 만 사용 가능 


#### TOP-N

상위 N개 추출

```sql
SELECT * 
    FROM (
        SELECT empno, ename, sal
            FROM emp
            ORDER BY sal DESC
    )
    WHERE ROWNUM <= 5;
```
